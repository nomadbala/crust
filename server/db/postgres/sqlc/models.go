// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender `json:"gender"`
	Valid  bool   `json:"valid"` // Valid is true if Gender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Gender), nil
}

type LanguagePreference string

const (
	LanguagePreferenceEn LanguagePreference = "en"
	LanguagePreferenceRu LanguagePreference = "ru"
)

func (e *LanguagePreference) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LanguagePreference(s)
	case string:
		*e = LanguagePreference(s)
	default:
		return fmt.Errorf("unsupported scan type for LanguagePreference: %T", src)
	}
	return nil
}

type NullLanguagePreference struct {
	LanguagePreference LanguagePreference `json:"language_preference"`
	Valid              bool               `json:"valid"` // Valid is true if LanguagePreference is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguagePreference) Scan(value interface{}) error {
	if value == nil {
		ns.LanguagePreference, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LanguagePreference.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguagePreference) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LanguagePreference), nil
}

type Comment struct {
	ID        pgtype.UUID      `db:"id" json:"id"`
	PostID    pgtype.UUID      `db:"post_id" json:"post_id"`
	UserID    pgtype.UUID      `db:"user_id" json:"user_id"`
	Content   string           `db:"content" json:"content"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type Dislike struct {
	ID        pgtype.UUID      `db:"id" json:"id"`
	PostID    pgtype.UUID      `db:"post_id" json:"post_id"`
	UserID    pgtype.UUID      `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type Like struct {
	ID        pgtype.UUID      `db:"id" json:"id"`
	PostID    pgtype.UUID      `db:"post_id" json:"post_id"`
	UserID    pgtype.UUID      `db:"user_id" json:"user_id"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
}

type Post struct {
	ID        pgtype.UUID      `db:"id" json:"id"`
	UserID    pgtype.UUID      `db:"user_id" json:"user_id"`
	Content   string           `db:"content" json:"content"`
	CreatedAt pgtype.Timestamp `db:"created_at" json:"created_at"`
	Views     pgtype.Int4      `db:"views" json:"views"`
}

type User struct {
	ID                  pgtype.UUID            `db:"id" json:"id"`
	Username            string                 `db:"username" json:"username"`
	PasswordHash        string                 `db:"password_hash" json:"password_hash"`
	Salt                string                 `db:"salt" json:"salt"`
	Email               string                 `db:"email" json:"email"`
	FirstName           pgtype.Text            `db:"first_name" json:"first_name"`
	LastName            pgtype.Text            `db:"last_name" json:"last_name"`
	PhoneNumber         pgtype.Text            `db:"phone_number" json:"phone_number"`
	DateOfBirth         pgtype.Date            `db:"date_of_birth" json:"date_of_birth"`
	Gender              NullGender             `db:"gender" json:"gender"`
	Bio                 pgtype.Text            `db:"bio" json:"bio"`
	LanguagePreference  NullLanguagePreference `db:"language_preference" json:"language_preference"`
	CreatedAt           pgtype.Timestamp       `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamp       `db:"updated_at" json:"updated_at"`
	FailedLoginAttempts pgtype.Int4            `db:"failed_login_attempts" json:"failed_login_attempts"`
	IsVerified          pgtype.Bool            `db:"is_verified" json:"is_verified"`
}
