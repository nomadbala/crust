// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username, password_hash, salt, email
) VALUES ($1, $2, $3, $4) RETURNING id, username, password_hash, salt, email, email_verified, first_name, last_name, phone_number, date_of_birth, gender, bio, language_preference, created_at, updated_at, failed_login_attempts
`

type CreateUserParams struct {
	Username     string `db:"username" json:"username"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	Salt         string `db:"salt" json:"salt"`
	Email        string `db:"email" json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Salt,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Salt,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Bio,
		&i.LanguagePreference,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const getEmailById = `-- name: GetEmailById :one
SELECT users.email FROM users
WHERE id = $1
`

func (q *Queries) GetEmailById(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getEmailById, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUser = `-- name: GetUser :one
SELECT id, password_hash, salt FROM users
WHERE username = $1
`

type GetUserRow struct {
	ID           uuid.UUID `db:"id" json:"id"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
	Salt         string    `db:"salt" json:"salt"`
}

func (q *Queries) GetUser(ctx context.Context, username string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.PasswordHash, &i.Salt)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, password_hash, salt, email, email_verified, first_name, last_name, phone_number, date_of_birth, gender, bio, language_preference, created_at, updated_at, failed_login_attempts FROM users
WHERE id = $1 LIMIT  1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Salt,
		&i.Email,
		&i.EmailVerified,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.Gender,
		&i.Bio,
		&i.LanguagePreference,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FailedLoginAttempts,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password_hash, salt, email, email_verified, first_name, last_name, phone_number, date_of_birth, gender, bio, language_preference, created_at, updated_at, failed_login_attempts FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.PasswordHash,
			&i.Salt,
			&i.Email,
			&i.EmailVerified,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.DateOfBirth,
			&i.Gender,
			&i.Bio,
			&i.LanguagePreference,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FailedLoginAttempts,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users
set email_verified = true
WHERE id = $1
`

func (q *Queries) VerifyEmail(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyEmail, id)
	return err
}
